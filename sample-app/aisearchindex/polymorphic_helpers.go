// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.8, generator: @autorest/go@4.0.0-preview.74)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// Code generated by @autorest/go. DO NOT EDIT.

package aisearchindex

import "encoding/json"

func unmarshalVectorQueryClassification(rawMsg json.RawMessage) (VectorQueryClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b VectorQueryClassification
	switch m["kind"] {
	case string(VectorQueryKindText):
		b = &VectorizableTextQuery{}
	case string(VectorQueryKindVector):
		b = &VectorizedQuery{}
	default:
		b = &VectorQuery{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalVectorQueryClassificationArray(rawMsg json.RawMessage) ([]VectorQueryClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]VectorQueryClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalVectorQueryClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

