// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package searchservice

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// SearchClient contains the methods for the SearchClient group.
// Don't use this type directly, use a constructor function instead.
type SearchClient struct {
	internal *azcore.Client
	endpoint string
}

// GetServiceStatistics - Gets service level statistics for a search service.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-01
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - SearchClientGetServiceStatisticsOptions contains the optional parameters for the SearchClient.GetServiceStatistics
//     method.
func (client *SearchClient) GetServiceStatistics(ctx context.Context, requestOptions *RequestOptions, options *SearchClientGetServiceStatisticsOptions) (SearchClientGetServiceStatisticsResponse, error) {
	var err error
	req, err := client.getServiceStatisticsCreateRequest(ctx, requestOptions, options)
	if err != nil {
		return SearchClientGetServiceStatisticsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SearchClientGetServiceStatisticsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SearchClientGetServiceStatisticsResponse{}, err
	}
	resp, err := client.getServiceStatisticsHandleResponse(httpResp)
	return resp, err
}

// getServiceStatisticsCreateRequest creates the GetServiceStatistics request.
func (client *SearchClient) getServiceStatisticsCreateRequest(ctx context.Context, requestOptions *RequestOptions, _ *SearchClientGetServiceStatisticsOptions) (*policy.Request, error) {
	urlPath := "/servicestats"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	return req, nil
}

// getServiceStatisticsHandleResponse handles the GetServiceStatistics response.
func (client *SearchClient) getServiceStatisticsHandleResponse(resp *http.Response) (SearchClientGetServiceStatisticsResponse, error) {
	result := SearchClientGetServiceStatisticsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ServiceStatistics); err != nil {
		return SearchClientGetServiceStatisticsResponse{}, err
	}
	return result, nil
}

